{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "D:\\Jiang\n"
     ]
    }
   ],
   "source": [
    "cd D:\\Jiang"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "ename": "ImportError",
     "evalue": "cannot import name 'is_list_like'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mImportError\u001b[0m                               Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-2-11fd6571ae0d>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m#import needed modules\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mdatetime\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mdatetime\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[1;32mfrom\u001b[0m \u001b[0mpandas_datareader\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      4\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mpandas\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcore\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mdatetools\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\Anaconda\\lib\\site-packages\\pandas_datareader\\__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[1;33m.\u001b[0m\u001b[0m_version\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mget_versions\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m from .data import (DataReader, Options, get_components_yahoo,\n\u001b[0m\u001b[0;32m      3\u001b[0m                    \u001b[0mget_dailysummary_iex\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mget_data_enigma\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mget_data_famafrench\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m                    \u001b[0mget_data_fred\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mget_data_google\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mget_data_moex\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m                    \u001b[0mget_data_morningstar\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mget_data_quandl\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mget_data_stooq\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\Anaconda\\lib\\site-packages\\pandas_datareader\\data.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m     12\u001b[0m     \u001b[0mImmediateDeprecationError\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     13\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mpandas_datareader\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfamafrench\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mFamaFrenchReader\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 14\u001b[1;33m \u001b[1;32mfrom\u001b[0m \u001b[0mpandas_datareader\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfred\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mFredReader\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     15\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mpandas_datareader\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mgoogle\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdaily\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mGoogleDailyReader\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     16\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mpandas_datareader\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mgoogle\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0moptions\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mOptions\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mGoogleOptions\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\Anaconda\\lib\\site-packages\\pandas_datareader\\fred.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[1;32mfrom\u001b[0m \u001b[0mpandas\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcore\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcommon\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mis_list_like\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mpandas\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mconcat\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mread_csv\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mpandas_datareader\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mbase\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0m_BaseReader\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mImportError\u001b[0m: cannot import name 'is_list_like'"
     ]
    }
   ],
   "source": [
    "#import needed modules\n",
    "from datetime import datetime\n",
    "from pandas_datareader import data\n",
    "from pandas.core import datetools\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from numpy import log, polyfit, sqrt, std, subtract\n",
    "import statsmodels.tsa.stattools as ts\n",
    "import statsmodels.api as sm\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import pprint\n",
    "import ffn\n",
    "from scipy.optimize import fmin"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [],
   "source": [
    "def bfly(a,b,c, curve):\n",
    "    abc = 2*curve[b]- curve[a]-curve[c]\n",
    "    return abc*100\n",
    "def ratecurve(a, b, curve):\n",
    "    ab = curve[b] - curve[a]\n",
    "    return ab*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 257,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'10y30y fly'"
      ]
     },
     "execution_count": 257,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cur_fly_list = [['2y','5y'],['2y','10y'],['2y','5y','10y'],['2y','10y','30y'],['5y','10y','30y'],['5y','10y'],['10y','30y'],['2y','30y']]\n",
    "''.join(cur_fly_list[6]) + ' fly'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "metadata": {},
   "outputs": [],
   "source": [
    "def addcurves(curvelist, curve):\n",
    "    for i in curvelist:\n",
    "        if len(i)>2:\n",
    "            curve[''.join(i).replace('y','s')] = bfly(i[0],i[1],i[2], curve)\n",
    "        else:\n",
    "            curve[''.join(i).replace('y','s')] = ratecurve(i[0],i[1],curve)\n",
    "    return curve[-10:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 255,
   "metadata": {},
   "outputs": [],
   "source": [
    "from dateutil.parser import parse\n",
    "uscurve = pd.read_csv('Data/bchartswaprate.csv', parse_dates=True, index_col=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>10y</th>\n",
       "      <th>5y</th>\n",
       "      <th>1y</th>\n",
       "      <th>2y</th>\n",
       "      <th>3y</th>\n",
       "      <th>7y</th>\n",
       "      <th>15y</th>\n",
       "      <th>30y</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2016-06-30</th>\n",
       "      <td>1.320</td>\n",
       "      <td>0.950</td>\n",
       "      <td>0.652</td>\n",
       "      <td>0.712</td>\n",
       "      <td>0.778</td>\n",
       "      <td>1.121</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.775</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-07-01</th>\n",
       "      <td>1.324</td>\n",
       "      <td>0.985</td>\n",
       "      <td>0.683</td>\n",
       "      <td>0.759</td>\n",
       "      <td>0.823</td>\n",
       "      <td>1.144</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-07-05</th>\n",
       "      <td>1.253</td>\n",
       "      <td>0.911</td>\n",
       "      <td>0.657</td>\n",
       "      <td>0.708</td>\n",
       "      <td>0.764</td>\n",
       "      <td>1.046</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.680</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-07-06</th>\n",
       "      <td>1.288</td>\n",
       "      <td>0.943</td>\n",
       "      <td>0.687</td>\n",
       "      <td>0.757</td>\n",
       "      <td>0.798</td>\n",
       "      <td>1.096</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-07-07</th>\n",
       "      <td>1.308</td>\n",
       "      <td>0.961</td>\n",
       "      <td>0.678</td>\n",
       "      <td>0.749</td>\n",
       "      <td>0.805</td>\n",
       "      <td>1.113</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.737</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-07-08</th>\n",
       "      <td>1.268</td>\n",
       "      <td>0.948</td>\n",
       "      <td>0.698</td>\n",
       "      <td>0.795</td>\n",
       "      <td>0.842</td>\n",
       "      <td>1.095</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-07-11</th>\n",
       "      <td>1.333</td>\n",
       "      <td>1.017</td>\n",
       "      <td>0.739</td>\n",
       "      <td>0.843</td>\n",
       "      <td>0.900</td>\n",
       "      <td>1.170</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.733</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-07-12</th>\n",
       "      <td>1.390</td>\n",
       "      <td>1.056</td>\n",
       "      <td>0.734</td>\n",
       "      <td>0.849</td>\n",
       "      <td>0.926</td>\n",
       "      <td>1.202</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.804</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-07-13</th>\n",
       "      <td>1.314</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.733</td>\n",
       "      <td>0.815</td>\n",
       "      <td>0.892</td>\n",
       "      <td>1.149</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.722</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-07-14</th>\n",
       "      <td>1.386</td>\n",
       "      <td>1.046</td>\n",
       "      <td>0.759</td>\n",
       "      <td>0.823</td>\n",
       "      <td>0.901</td>\n",
       "      <td>1.177</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.812</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-07-15</th>\n",
       "      <td>1.401</td>\n",
       "      <td>1.064</td>\n",
       "      <td>0.728</td>\n",
       "      <td>0.837</td>\n",
       "      <td>0.935</td>\n",
       "      <td>1.223</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.805</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-07-19</th>\n",
       "      <td>1.403</td>\n",
       "      <td>1.080</td>\n",
       "      <td>0.788</td>\n",
       "      <td>0.900</td>\n",
       "      <td>0.958</td>\n",
       "      <td>1.240</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.807</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-07-20</th>\n",
       "      <td>1.455</td>\n",
       "      <td>1.120</td>\n",
       "      <td>0.800</td>\n",
       "      <td>0.910</td>\n",
       "      <td>0.984</td>\n",
       "      <td>1.283</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.861</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-07-21</th>\n",
       "      <td>1.426</td>\n",
       "      <td>1.094</td>\n",
       "      <td>0.804</td>\n",
       "      <td>0.888</td>\n",
       "      <td>0.956</td>\n",
       "      <td>1.243</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.841</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-07-22</th>\n",
       "      <td>1.496</td>\n",
       "      <td>1.177</td>\n",
       "      <td>0.849</td>\n",
       "      <td>0.962</td>\n",
       "      <td>1.045</td>\n",
       "      <td>1.332</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.893</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-07-25</th>\n",
       "      <td>1.468</td>\n",
       "      <td>1.179</td>\n",
       "      <td>0.853</td>\n",
       "      <td>1.016</td>\n",
       "      <td>1.067</td>\n",
       "      <td>1.329</td>\n",
       "      <td>1.698</td>\n",
       "      <td>1.845</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-07-26</th>\n",
       "      <td>1.461</td>\n",
       "      <td>1.163</td>\n",
       "      <td>0.885</td>\n",
       "      <td>1.014</td>\n",
       "      <td>1.055</td>\n",
       "      <td>1.299</td>\n",
       "      <td>1.695</td>\n",
       "      <td>1.833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-07-27</th>\n",
       "      <td>1.416</td>\n",
       "      <td>1.130</td>\n",
       "      <td>0.864</td>\n",
       "      <td>0.952</td>\n",
       "      <td>1.002</td>\n",
       "      <td>1.247</td>\n",
       "      <td>1.653</td>\n",
       "      <td>1.790</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-07-28</th>\n",
       "      <td>1.424</td>\n",
       "      <td>1.135</td>\n",
       "      <td>0.859</td>\n",
       "      <td>0.937</td>\n",
       "      <td>1.009</td>\n",
       "      <td>1.267</td>\n",
       "      <td>1.617</td>\n",
       "      <td>1.822</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-07-29</th>\n",
       "      <td>1.343</td>\n",
       "      <td>1.054</td>\n",
       "      <td>0.828</td>\n",
       "      <td>0.885</td>\n",
       "      <td>0.927</td>\n",
       "      <td>1.185</td>\n",
       "      <td>1.582</td>\n",
       "      <td>1.743</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-01</th>\n",
       "      <td>1.405</td>\n",
       "      <td>1.090</td>\n",
       "      <td>0.812</td>\n",
       "      <td>0.902</td>\n",
       "      <td>0.962</td>\n",
       "      <td>1.239</td>\n",
       "      <td>1.585</td>\n",
       "      <td>1.803</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-02</th>\n",
       "      <td>1.436</td>\n",
       "      <td>1.110</td>\n",
       "      <td>0.828</td>\n",
       "      <td>0.909</td>\n",
       "      <td>0.976</td>\n",
       "      <td>1.257</td>\n",
       "      <td>1.527</td>\n",
       "      <td>1.847</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-03</th>\n",
       "      <td>1.422</td>\n",
       "      <td>1.110</td>\n",
       "      <td>0.859</td>\n",
       "      <td>0.917</td>\n",
       "      <td>0.972</td>\n",
       "      <td>1.246</td>\n",
       "      <td>1.663</td>\n",
       "      <td>1.836</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-04</th>\n",
       "      <td>1.401</td>\n",
       "      <td>1.088</td>\n",
       "      <td>0.843</td>\n",
       "      <td>0.913</td>\n",
       "      <td>0.973</td>\n",
       "      <td>1.239</td>\n",
       "      <td>1.672</td>\n",
       "      <td>1.804</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-05</th>\n",
       "      <td>1.459</td>\n",
       "      <td>1.176</td>\n",
       "      <td>0.899</td>\n",
       "      <td>0.992</td>\n",
       "      <td>1.047</td>\n",
       "      <td>1.313</td>\n",
       "      <td>1.702</td>\n",
       "      <td>1.834</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-08</th>\n",
       "      <td>1.482</td>\n",
       "      <td>1.192</td>\n",
       "      <td>0.905</td>\n",
       "      <td>0.994</td>\n",
       "      <td>1.055</td>\n",
       "      <td>1.322</td>\n",
       "      <td>1.715</td>\n",
       "      <td>1.842</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-09</th>\n",
       "      <td>1.427</td>\n",
       "      <td>1.137</td>\n",
       "      <td>0.899</td>\n",
       "      <td>0.970</td>\n",
       "      <td>1.031</td>\n",
       "      <td>1.272</td>\n",
       "      <td>1.467</td>\n",
       "      <td>1.792</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-10</th>\n",
       "      <td>1.409</td>\n",
       "      <td>1.140</td>\n",
       "      <td>0.924</td>\n",
       "      <td>0.992</td>\n",
       "      <td>1.036</td>\n",
       "      <td>1.261</td>\n",
       "      <td>1.455</td>\n",
       "      <td>1.770</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-11</th>\n",
       "      <td>1.479</td>\n",
       "      <td>1.214</td>\n",
       "      <td>0.899</td>\n",
       "      <td>1.022</td>\n",
       "      <td>1.086</td>\n",
       "      <td>1.328</td>\n",
       "      <td>1.460</td>\n",
       "      <td>1.822</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-12</th>\n",
       "      <td>1.364</td>\n",
       "      <td>1.077</td>\n",
       "      <td>0.884</td>\n",
       "      <td>0.906</td>\n",
       "      <td>0.964</td>\n",
       "      <td>1.196</td>\n",
       "      <td>1.483</td>\n",
       "      <td>1.721</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-04-24</th>\n",
       "      <td>3.021</td>\n",
       "      <td>2.932</td>\n",
       "      <td>2.532</td>\n",
       "      <td>2.761</td>\n",
       "      <td>2.849</td>\n",
       "      <td>2.977</td>\n",
       "      <td>3.007</td>\n",
       "      <td>3.042</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-04-25</th>\n",
       "      <td>3.052</td>\n",
       "      <td>2.961</td>\n",
       "      <td>2.531</td>\n",
       "      <td>2.757</td>\n",
       "      <td>2.854</td>\n",
       "      <td>3.004</td>\n",
       "      <td>3.030</td>\n",
       "      <td>3.084</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-04-26</th>\n",
       "      <td>3.013</td>\n",
       "      <td>2.924</td>\n",
       "      <td>2.510</td>\n",
       "      <td>2.746</td>\n",
       "      <td>2.843</td>\n",
       "      <td>2.966</td>\n",
       "      <td>3.067</td>\n",
       "      <td>3.043</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-04-27</th>\n",
       "      <td>2.989</td>\n",
       "      <td>2.911</td>\n",
       "      <td>2.516</td>\n",
       "      <td>2.734</td>\n",
       "      <td>2.833</td>\n",
       "      <td>2.947</td>\n",
       "      <td>3.023</td>\n",
       "      <td>3.014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-04-30</th>\n",
       "      <td>2.987</td>\n",
       "      <td>2.916</td>\n",
       "      <td>2.522</td>\n",
       "      <td>2.752</td>\n",
       "      <td>2.852</td>\n",
       "      <td>2.948</td>\n",
       "      <td>2.997</td>\n",
       "      <td>3.013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-01</th>\n",
       "      <td>2.995</td>\n",
       "      <td>2.925</td>\n",
       "      <td>2.524</td>\n",
       "      <td>2.761</td>\n",
       "      <td>2.853</td>\n",
       "      <td>2.960</td>\n",
       "      <td>2.994</td>\n",
       "      <td>3.018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-02</th>\n",
       "      <td>3.008</td>\n",
       "      <td>2.927</td>\n",
       "      <td>2.540</td>\n",
       "      <td>2.760</td>\n",
       "      <td>2.856</td>\n",
       "      <td>2.963</td>\n",
       "      <td>3.007</td>\n",
       "      <td>3.039</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-03</th>\n",
       "      <td>2.981</td>\n",
       "      <td>2.907</td>\n",
       "      <td>2.528</td>\n",
       "      <td>2.749</td>\n",
       "      <td>2.834</td>\n",
       "      <td>2.940</td>\n",
       "      <td>3.016</td>\n",
       "      <td>3.008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-04</th>\n",
       "      <td>2.985</td>\n",
       "      <td>2.917</td>\n",
       "      <td>2.536</td>\n",
       "      <td>2.772</td>\n",
       "      <td>2.859</td>\n",
       "      <td>2.945</td>\n",
       "      <td>2.987</td>\n",
       "      <td>3.011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-07</th>\n",
       "      <td>2.990</td>\n",
       "      <td>2.921</td>\n",
       "      <td>2.552</td>\n",
       "      <td>2.771</td>\n",
       "      <td>2.861</td>\n",
       "      <td>2.947</td>\n",
       "      <td>2.991</td>\n",
       "      <td>3.016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-08</th>\n",
       "      <td>3.014</td>\n",
       "      <td>2.941</td>\n",
       "      <td>2.535</td>\n",
       "      <td>2.774</td>\n",
       "      <td>2.893</td>\n",
       "      <td>2.972</td>\n",
       "      <td>2.998</td>\n",
       "      <td>3.031</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-09</th>\n",
       "      <td>3.024</td>\n",
       "      <td>2.958</td>\n",
       "      <td>2.539</td>\n",
       "      <td>2.787</td>\n",
       "      <td>2.885</td>\n",
       "      <td>2.993</td>\n",
       "      <td>3.016</td>\n",
       "      <td>3.061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-10</th>\n",
       "      <td>3.014</td>\n",
       "      <td>2.946</td>\n",
       "      <td>2.533</td>\n",
       "      <td>2.787</td>\n",
       "      <td>2.881</td>\n",
       "      <td>2.975</td>\n",
       "      <td>3.042</td>\n",
       "      <td>3.005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-11</th>\n",
       "      <td>3.002</td>\n",
       "      <td>2.928</td>\n",
       "      <td>2.514</td>\n",
       "      <td>2.759</td>\n",
       "      <td>2.858</td>\n",
       "      <td>2.960</td>\n",
       "      <td>3.016</td>\n",
       "      <td>3.010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-14</th>\n",
       "      <td>3.026</td>\n",
       "      <td>2.942</td>\n",
       "      <td>2.507</td>\n",
       "      <td>2.758</td>\n",
       "      <td>2.862</td>\n",
       "      <td>2.979</td>\n",
       "      <td>3.005</td>\n",
       "      <td>3.043</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-15</th>\n",
       "      <td>3.101</td>\n",
       "      <td>2.998</td>\n",
       "      <td>2.524</td>\n",
       "      <td>2.792</td>\n",
       "      <td>2.903</td>\n",
       "      <td>3.045</td>\n",
       "      <td>3.033</td>\n",
       "      <td>3.121</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-16</th>\n",
       "      <td>3.137</td>\n",
       "      <td>3.040</td>\n",
       "      <td>2.544</td>\n",
       "      <td>2.821</td>\n",
       "      <td>2.940</td>\n",
       "      <td>3.086</td>\n",
       "      <td>3.111</td>\n",
       "      <td>3.148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-17</th>\n",
       "      <td>3.147</td>\n",
       "      <td>3.041</td>\n",
       "      <td>2.539</td>\n",
       "      <td>2.819</td>\n",
       "      <td>2.940</td>\n",
       "      <td>3.091</td>\n",
       "      <td>3.140</td>\n",
       "      <td>3.165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-18</th>\n",
       "      <td>3.092</td>\n",
       "      <td>2.986</td>\n",
       "      <td>2.527</td>\n",
       "      <td>2.792</td>\n",
       "      <td>2.895</td>\n",
       "      <td>3.030</td>\n",
       "      <td>3.148</td>\n",
       "      <td>3.119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-21</th>\n",
       "      <td>3.093</td>\n",
       "      <td>2.992</td>\n",
       "      <td>2.535</td>\n",
       "      <td>2.801</td>\n",
       "      <td>2.912</td>\n",
       "      <td>3.035</td>\n",
       "      <td>3.100</td>\n",
       "      <td>3.118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-22</th>\n",
       "      <td>3.085</td>\n",
       "      <td>2.995</td>\n",
       "      <td>2.543</td>\n",
       "      <td>2.806</td>\n",
       "      <td>2.914</td>\n",
       "      <td>3.039</td>\n",
       "      <td>3.097</td>\n",
       "      <td>3.107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-23</th>\n",
       "      <td>3.029</td>\n",
       "      <td>2.935</td>\n",
       "      <td>2.511</td>\n",
       "      <td>2.762</td>\n",
       "      <td>2.858</td>\n",
       "      <td>2.980</td>\n",
       "      <td>3.096</td>\n",
       "      <td>3.052</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-24</th>\n",
       "      <td>3.010</td>\n",
       "      <td>2.914</td>\n",
       "      <td>2.485</td>\n",
       "      <td>2.741</td>\n",
       "      <td>2.840</td>\n",
       "      <td>2.958</td>\n",
       "      <td>3.035</td>\n",
       "      <td>3.028</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-25</th>\n",
       "      <td>2.966</td>\n",
       "      <td>2.869</td>\n",
       "      <td>2.486</td>\n",
       "      <td>2.707</td>\n",
       "      <td>2.793</td>\n",
       "      <td>2.912</td>\n",
       "      <td>3.014</td>\n",
       "      <td>2.993</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-28</th>\n",
       "      <td>2.941</td>\n",
       "      <td>2.844</td>\n",
       "      <td>2.474</td>\n",
       "      <td>2.691</td>\n",
       "      <td>2.771</td>\n",
       "      <td>2.882</td>\n",
       "      <td>2.973</td>\n",
       "      <td>2.975</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-29</th>\n",
       "      <td>2.805</td>\n",
       "      <td>2.687</td>\n",
       "      <td>2.412</td>\n",
       "      <td>2.565</td>\n",
       "      <td>2.623</td>\n",
       "      <td>2.737</td>\n",
       "      <td>2.834</td>\n",
       "      <td>2.854</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-30</th>\n",
       "      <td>2.882</td>\n",
       "      <td>2.783</td>\n",
       "      <td>2.465</td>\n",
       "      <td>2.655</td>\n",
       "      <td>2.726</td>\n",
       "      <td>2.826</td>\n",
       "      <td>2.902</td>\n",
       "      <td>2.915</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-31</th>\n",
       "      <td>2.913</td>\n",
       "      <td>2.831</td>\n",
       "      <td>2.490</td>\n",
       "      <td>2.698</td>\n",
       "      <td>2.773</td>\n",
       "      <td>2.863</td>\n",
       "      <td>2.918</td>\n",
       "      <td>2.938</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-06-01</th>\n",
       "      <td>2.957</td>\n",
       "      <td>2.877</td>\n",
       "      <td>2.519</td>\n",
       "      <td>2.734</td>\n",
       "      <td>2.819</td>\n",
       "      <td>2.910</td>\n",
       "      <td>2.961</td>\n",
       "      <td>2.976</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-06-04</th>\n",
       "      <td>3.002</td>\n",
       "      <td>2.928</td>\n",
       "      <td>2.548</td>\n",
       "      <td>2.783</td>\n",
       "      <td>2.869</td>\n",
       "      <td>2.955</td>\n",
       "      <td>3.003</td>\n",
       "      <td>3.010</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>499 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              10y     5y     1y     2y     3y     7y    15y    30y\n",
       "Time                                                              \n",
       "2016-06-30  1.320  0.950  0.652  0.712  0.778  1.121    NaN  1.775\n",
       "2016-07-01  1.324  0.985  0.683  0.759  0.823  1.144    NaN  1.745\n",
       "2016-07-05  1.253  0.911  0.657  0.708  0.764  1.046    NaN  1.680\n",
       "2016-07-06  1.288  0.943  0.687  0.757  0.798  1.096    NaN  1.727\n",
       "2016-07-07  1.308  0.961  0.678  0.749  0.805  1.113    NaN  1.737\n",
       "2016-07-08  1.268  0.948  0.698  0.795  0.842  1.095    NaN  1.698\n",
       "2016-07-11  1.333  1.017  0.739  0.843  0.900  1.170    NaN  1.733\n",
       "2016-07-12  1.390  1.056  0.734  0.849  0.926  1.202    NaN  1.804\n",
       "2016-07-13  1.314  1.000  0.733  0.815  0.892  1.149    NaN  1.722\n",
       "2016-07-14  1.386  1.046  0.759  0.823  0.901  1.177    NaN  1.812\n",
       "2016-07-15  1.401  1.064  0.728  0.837  0.935  1.223    NaN  1.805\n",
       "2016-07-19  1.403  1.080  0.788  0.900  0.958  1.240    NaN  1.807\n",
       "2016-07-20  1.455  1.120  0.800  0.910  0.984  1.283    NaN  1.861\n",
       "2016-07-21  1.426  1.094  0.804  0.888  0.956  1.243    NaN  1.841\n",
       "2016-07-22  1.496  1.177  0.849  0.962  1.045  1.332    NaN  1.893\n",
       "2016-07-25  1.468  1.179  0.853  1.016  1.067  1.329  1.698  1.845\n",
       "2016-07-26  1.461  1.163  0.885  1.014  1.055  1.299  1.695  1.833\n",
       "2016-07-27  1.416  1.130  0.864  0.952  1.002  1.247  1.653  1.790\n",
       "2016-07-28  1.424  1.135  0.859  0.937  1.009  1.267  1.617  1.822\n",
       "2016-07-29  1.343  1.054  0.828  0.885  0.927  1.185  1.582  1.743\n",
       "2016-08-01  1.405  1.090  0.812  0.902  0.962  1.239  1.585  1.803\n",
       "2016-08-02  1.436  1.110  0.828  0.909  0.976  1.257  1.527  1.847\n",
       "2016-08-03  1.422  1.110  0.859  0.917  0.972  1.246  1.663  1.836\n",
       "2016-08-04  1.401  1.088  0.843  0.913  0.973  1.239  1.672  1.804\n",
       "2016-08-05  1.459  1.176  0.899  0.992  1.047  1.313  1.702  1.834\n",
       "2016-08-08  1.482  1.192  0.905  0.994  1.055  1.322  1.715  1.842\n",
       "2016-08-09  1.427  1.137  0.899  0.970  1.031  1.272  1.467  1.792\n",
       "2016-08-10  1.409  1.140  0.924  0.992  1.036  1.261  1.455  1.770\n",
       "2016-08-11  1.479  1.214  0.899  1.022  1.086  1.328  1.460  1.822\n",
       "2016-08-12  1.364  1.077  0.884  0.906  0.964  1.196  1.483  1.721\n",
       "...           ...    ...    ...    ...    ...    ...    ...    ...\n",
       "2018-04-24  3.021  2.932  2.532  2.761  2.849  2.977  3.007  3.042\n",
       "2018-04-25  3.052  2.961  2.531  2.757  2.854  3.004  3.030  3.084\n",
       "2018-04-26  3.013  2.924  2.510  2.746  2.843  2.966  3.067  3.043\n",
       "2018-04-27  2.989  2.911  2.516  2.734  2.833  2.947  3.023  3.014\n",
       "2018-04-30  2.987  2.916  2.522  2.752  2.852  2.948  2.997  3.013\n",
       "2018-05-01  2.995  2.925  2.524  2.761  2.853  2.960  2.994  3.018\n",
       "2018-05-02  3.008  2.927  2.540  2.760  2.856  2.963  3.007  3.039\n",
       "2018-05-03  2.981  2.907  2.528  2.749  2.834  2.940  3.016  3.008\n",
       "2018-05-04  2.985  2.917  2.536  2.772  2.859  2.945  2.987  3.011\n",
       "2018-05-07  2.990  2.921  2.552  2.771  2.861  2.947  2.991  3.016\n",
       "2018-05-08  3.014  2.941  2.535  2.774  2.893  2.972  2.998  3.031\n",
       "2018-05-09  3.024  2.958  2.539  2.787  2.885  2.993  3.016  3.061\n",
       "2018-05-10  3.014  2.946  2.533  2.787  2.881  2.975  3.042  3.005\n",
       "2018-05-11  3.002  2.928  2.514  2.759  2.858  2.960  3.016  3.010\n",
       "2018-05-14  3.026  2.942  2.507  2.758  2.862  2.979  3.005  3.043\n",
       "2018-05-15  3.101  2.998  2.524  2.792  2.903  3.045  3.033  3.121\n",
       "2018-05-16  3.137  3.040  2.544  2.821  2.940  3.086  3.111  3.148\n",
       "2018-05-17  3.147  3.041  2.539  2.819  2.940  3.091  3.140  3.165\n",
       "2018-05-18  3.092  2.986  2.527  2.792  2.895  3.030  3.148  3.119\n",
       "2018-05-21  3.093  2.992  2.535  2.801  2.912  3.035  3.100  3.118\n",
       "2018-05-22  3.085  2.995  2.543  2.806  2.914  3.039  3.097  3.107\n",
       "2018-05-23  3.029  2.935  2.511  2.762  2.858  2.980  3.096  3.052\n",
       "2018-05-24  3.010  2.914  2.485  2.741  2.840  2.958  3.035  3.028\n",
       "2018-05-25  2.966  2.869  2.486  2.707  2.793  2.912  3.014  2.993\n",
       "2018-05-28  2.941  2.844  2.474  2.691  2.771  2.882  2.973  2.975\n",
       "2018-05-29  2.805  2.687  2.412  2.565  2.623  2.737  2.834  2.854\n",
       "2018-05-30  2.882  2.783  2.465  2.655  2.726  2.826  2.902  2.915\n",
       "2018-05-31  2.913  2.831  2.490  2.698  2.773  2.863  2.918  2.938\n",
       "2018-06-01  2.957  2.877  2.519  2.734  2.819  2.910  2.961  2.976\n",
       "2018-06-04  3.002  2.928  2.548  2.783  2.869  2.955  3.003  3.010\n",
       "\n",
       "[499 rows x 8 columns]"
      ]
     },
     "execution_count": 256,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "uscurve = uscurve.iloc[::-1]\n",
    "uscurve = uscurve*100\n",
    "uscurve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>10y</th>\n",
       "      <th>5y</th>\n",
       "      <th>1y</th>\n",
       "      <th>2y</th>\n",
       "      <th>3y</th>\n",
       "      <th>7y</th>\n",
       "      <th>15y</th>\n",
       "      <th>30y</th>\n",
       "      <th>2s5s</th>\n",
       "      <th>2s10s</th>\n",
       "      <th>2s5s10s</th>\n",
       "      <th>2s10s30s</th>\n",
       "      <th>5s10s30s</th>\n",
       "      <th>5s10s</th>\n",
       "      <th>10s30s</th>\n",
       "      <th>2s30s</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-05-22</th>\n",
       "      <td>3.085</td>\n",
       "      <td>2.995</td>\n",
       "      <td>2.543</td>\n",
       "      <td>2.806</td>\n",
       "      <td>2.914</td>\n",
       "      <td>3.039</td>\n",
       "      <td>3.097</td>\n",
       "      <td>3.107</td>\n",
       "      <td>18.9</td>\n",
       "      <td>27.9</td>\n",
       "      <td>9.9</td>\n",
       "      <td>25.7</td>\n",
       "      <td>6.8</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2.2</td>\n",
       "      <td>30.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-23</th>\n",
       "      <td>3.029</td>\n",
       "      <td>2.935</td>\n",
       "      <td>2.511</td>\n",
       "      <td>2.762</td>\n",
       "      <td>2.858</td>\n",
       "      <td>2.980</td>\n",
       "      <td>3.096</td>\n",
       "      <td>3.052</td>\n",
       "      <td>17.3</td>\n",
       "      <td>26.7</td>\n",
       "      <td>7.9</td>\n",
       "      <td>24.4</td>\n",
       "      <td>7.1</td>\n",
       "      <td>9.4</td>\n",
       "      <td>2.3</td>\n",
       "      <td>29.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-24</th>\n",
       "      <td>3.010</td>\n",
       "      <td>2.914</td>\n",
       "      <td>2.485</td>\n",
       "      <td>2.741</td>\n",
       "      <td>2.840</td>\n",
       "      <td>2.958</td>\n",
       "      <td>3.035</td>\n",
       "      <td>3.028</td>\n",
       "      <td>17.3</td>\n",
       "      <td>26.9</td>\n",
       "      <td>7.7</td>\n",
       "      <td>25.1</td>\n",
       "      <td>7.8</td>\n",
       "      <td>9.6</td>\n",
       "      <td>1.8</td>\n",
       "      <td>28.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-25</th>\n",
       "      <td>2.966</td>\n",
       "      <td>2.869</td>\n",
       "      <td>2.486</td>\n",
       "      <td>2.707</td>\n",
       "      <td>2.793</td>\n",
       "      <td>2.912</td>\n",
       "      <td>3.014</td>\n",
       "      <td>2.993</td>\n",
       "      <td>16.2</td>\n",
       "      <td>25.9</td>\n",
       "      <td>6.5</td>\n",
       "      <td>23.2</td>\n",
       "      <td>7.0</td>\n",
       "      <td>9.7</td>\n",
       "      <td>2.7</td>\n",
       "      <td>28.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-28</th>\n",
       "      <td>2.941</td>\n",
       "      <td>2.844</td>\n",
       "      <td>2.474</td>\n",
       "      <td>2.691</td>\n",
       "      <td>2.771</td>\n",
       "      <td>2.882</td>\n",
       "      <td>2.973</td>\n",
       "      <td>2.975</td>\n",
       "      <td>15.3</td>\n",
       "      <td>25.0</td>\n",
       "      <td>5.6</td>\n",
       "      <td>21.6</td>\n",
       "      <td>6.3</td>\n",
       "      <td>9.7</td>\n",
       "      <td>3.4</td>\n",
       "      <td>28.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-29</th>\n",
       "      <td>2.805</td>\n",
       "      <td>2.687</td>\n",
       "      <td>2.412</td>\n",
       "      <td>2.565</td>\n",
       "      <td>2.623</td>\n",
       "      <td>2.737</td>\n",
       "      <td>2.834</td>\n",
       "      <td>2.854</td>\n",
       "      <td>12.2</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0.4</td>\n",
       "      <td>19.1</td>\n",
       "      <td>6.9</td>\n",
       "      <td>11.8</td>\n",
       "      <td>4.9</td>\n",
       "      <td>28.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-30</th>\n",
       "      <td>2.882</td>\n",
       "      <td>2.783</td>\n",
       "      <td>2.465</td>\n",
       "      <td>2.655</td>\n",
       "      <td>2.726</td>\n",
       "      <td>2.826</td>\n",
       "      <td>2.902</td>\n",
       "      <td>2.915</td>\n",
       "      <td>12.8</td>\n",
       "      <td>22.7</td>\n",
       "      <td>2.9</td>\n",
       "      <td>19.4</td>\n",
       "      <td>6.6</td>\n",
       "      <td>9.9</td>\n",
       "      <td>3.3</td>\n",
       "      <td>26.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-31</th>\n",
       "      <td>2.913</td>\n",
       "      <td>2.831</td>\n",
       "      <td>2.490</td>\n",
       "      <td>2.698</td>\n",
       "      <td>2.773</td>\n",
       "      <td>2.863</td>\n",
       "      <td>2.918</td>\n",
       "      <td>2.938</td>\n",
       "      <td>13.3</td>\n",
       "      <td>21.5</td>\n",
       "      <td>5.1</td>\n",
       "      <td>19.0</td>\n",
       "      <td>5.7</td>\n",
       "      <td>8.2</td>\n",
       "      <td>2.5</td>\n",
       "      <td>24.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-06-01</th>\n",
       "      <td>2.957</td>\n",
       "      <td>2.877</td>\n",
       "      <td>2.519</td>\n",
       "      <td>2.734</td>\n",
       "      <td>2.819</td>\n",
       "      <td>2.910</td>\n",
       "      <td>2.961</td>\n",
       "      <td>2.976</td>\n",
       "      <td>14.3</td>\n",
       "      <td>22.3</td>\n",
       "      <td>6.3</td>\n",
       "      <td>20.4</td>\n",
       "      <td>6.1</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.9</td>\n",
       "      <td>24.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-06-04</th>\n",
       "      <td>3.002</td>\n",
       "      <td>2.928</td>\n",
       "      <td>2.548</td>\n",
       "      <td>2.783</td>\n",
       "      <td>2.869</td>\n",
       "      <td>2.955</td>\n",
       "      <td>3.003</td>\n",
       "      <td>3.010</td>\n",
       "      <td>14.5</td>\n",
       "      <td>21.9</td>\n",
       "      <td>7.1</td>\n",
       "      <td>21.1</td>\n",
       "      <td>6.6</td>\n",
       "      <td>7.4</td>\n",
       "      <td>0.8</td>\n",
       "      <td>22.7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              10y     5y     1y     2y     3y     7y    15y    30y  2s5s  \\\n",
       "Time                                                                       \n",
       "2018-05-22  3.085  2.995  2.543  2.806  2.914  3.039  3.097  3.107  18.9   \n",
       "2018-05-23  3.029  2.935  2.511  2.762  2.858  2.980  3.096  3.052  17.3   \n",
       "2018-05-24  3.010  2.914  2.485  2.741  2.840  2.958  3.035  3.028  17.3   \n",
       "2018-05-25  2.966  2.869  2.486  2.707  2.793  2.912  3.014  2.993  16.2   \n",
       "2018-05-28  2.941  2.844  2.474  2.691  2.771  2.882  2.973  2.975  15.3   \n",
       "2018-05-29  2.805  2.687  2.412  2.565  2.623  2.737  2.834  2.854  12.2   \n",
       "2018-05-30  2.882  2.783  2.465  2.655  2.726  2.826  2.902  2.915  12.8   \n",
       "2018-05-31  2.913  2.831  2.490  2.698  2.773  2.863  2.918  2.938  13.3   \n",
       "2018-06-01  2.957  2.877  2.519  2.734  2.819  2.910  2.961  2.976  14.3   \n",
       "2018-06-04  3.002  2.928  2.548  2.783  2.869  2.955  3.003  3.010  14.5   \n",
       "\n",
       "            2s10s  2s5s10s  2s10s30s  5s10s30s  5s10s  10s30s  2s30s  \n",
       "Time                                                                  \n",
       "2018-05-22   27.9      9.9      25.7       6.8    9.0     2.2   30.1  \n",
       "2018-05-23   26.7      7.9      24.4       7.1    9.4     2.3   29.0  \n",
       "2018-05-24   26.9      7.7      25.1       7.8    9.6     1.8   28.7  \n",
       "2018-05-25   25.9      6.5      23.2       7.0    9.7     2.7   28.6  \n",
       "2018-05-28   25.0      5.6      21.6       6.3    9.7     3.4   28.4  \n",
       "2018-05-29   24.0      0.4      19.1       6.9   11.8     4.9   28.9  \n",
       "2018-05-30   22.7      2.9      19.4       6.6    9.9     3.3   26.0  \n",
       "2018-05-31   21.5      5.1      19.0       5.7    8.2     2.5   24.0  \n",
       "2018-06-01   22.3      6.3      20.4       6.1    8.0     1.9   24.2  \n",
       "2018-06-04   21.9      7.1      21.1       6.6    7.4     0.8   22.7  "
      ]
     },
     "execution_count": 258,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "addcurves(cur_fly_list, uscurve)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 570,
   "metadata": {},
   "outputs": [],
   "source": [
    "symbolist = ['2s5s10s','5s10s30s']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 613,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "D:\\Anaconda\\lib\\site-packages\\matplotlib\\axes\\_axes.py:6462: UserWarning: The 'normed' kwarg is deprecated, and has been replaced by the 'density' kwarg.\n",
      "  warnings.warn(\"The 'normed' kwarg is deprecated, and has been \"\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Augmented Dickey Fuller test statistic = -3.634454693398425\n",
      "Augmented Dickey Fuller p-value = 0.005135481303511574\n",
      "Augmented Dickey Fuller 1%, 5% and 10% test statistics = {'1%': -3.4436298692815304, '5%': -2.867396599893435, '10%': -2.5698893429241916}\n",
      "Hurst Exponent = 0.17\n",
      "Halflife =  4\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sharpe Ratio = 4.96\n",
      "              x    y        hr    spread    zScore  long entry  long exit  \\\n",
      "Time                                                                        \n",
      "2018-05-22  9.9  6.8 -0.699581 -0.125854 -1.266812        True      False   \n",
      "2018-05-23  7.9  7.1 -0.699581  1.573309  0.527359       False       True   \n",
      "2018-05-24  7.7  7.8 -0.699581  2.413225  1.062398       False      False   \n",
      "2018-05-25  6.5  7.0 -0.699581  2.452722  0.724805       False      False   \n",
      "2018-05-28  5.6  6.3 -0.699581  2.382345  0.418926       False      False   \n",
      "2018-05-29  0.4  6.9 -0.699581  6.620168  1.499859       False      False   \n",
      "2018-05-30  2.9  6.6 -0.699581  4.571215  0.279952       False      False   \n",
      "2018-05-31  5.1  5.7 -0.699581  2.132136 -0.852972       False      False   \n",
      "2018-06-01  6.3  6.1 -0.699581  1.692638 -0.899315       False      False   \n",
      "2018-06-04  7.1  6.6 -0.699581  1.632974 -0.627223       False      False   \n",
      "\n",
      "            num units long  short entry  short exit  num units short  \\\n",
      "Time                                                                   \n",
      "2018-05-22             1.0        False        True              0.0   \n",
      "2018-05-23             0.0        False       False              0.0   \n",
      "2018-05-24             0.0         True       False             -1.0   \n",
      "2018-05-25             0.0        False       False             -1.0   \n",
      "2018-05-28             0.0        False       False             -1.0   \n",
      "2018-05-29             0.0         True       False             -1.0   \n",
      "2018-05-30             0.0        False       False             -1.0   \n",
      "2018-05-31             0.0        False        True              0.0   \n",
      "2018-06-01             0.0        False       False              0.0   \n",
      "2018-06-04             0.0        False       False              0.0   \n",
      "\n",
      "            numUnits  spread pct ch  port rets    cum rets  \n",
      "Time                                                        \n",
      "2018-05-22       1.0      -1.429623   1.429623  231.194161  \n",
      "2018-05-23       0.0       1.699162   1.699162  232.893323  \n",
      "2018-05-24      -1.0       0.839916   0.000000  232.893323  \n",
      "2018-05-25      -1.0       0.039497  -0.039497  232.853826  \n",
      "2018-05-28      -1.0      -0.070377   0.070377  232.924203  \n",
      "2018-05-29      -1.0       4.237822  -4.237822  228.686381  \n",
      "2018-05-30      -1.0      -2.048953   2.048953  230.735334  \n",
      "2018-05-31       0.0      -2.439079   2.439079  233.174412  \n",
      "2018-06-01       0.0      -0.439497  -0.000000  233.174412  \n",
      "2018-06-04       0.0      -0.059665  -0.000000  233.174412  \n"
     ]
    }
   ],
   "source": [
    "backtest(uscurve,symbolist,1,499,30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 395,
   "metadata": {},
   "outputs": [],
   "source": [
    "def backtest(curve, symbolist, zthreshold, period, regress_period):\n",
    "    if len(symbolist) > 1:\n",
    "        backtestcorr(curve, symbolist, zthreshold, period, regress_period)\n",
    "    else:\n",
    "        backtestsingle(curve, symbolist, zthreshold, period, regress_period)\n",
    "    return "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 317,
   "metadata": {},
   "outputs": [],
   "source": [
    "def backtestcorr(curve, symbolist, zthreshold, period, regress_period):\n",
    "    x = curve[symbolist[0]][-period:]\n",
    "    y = curve[symbolist[1]][-period:]\n",
    "    \n",
    "    #make sure DataFrames are the same length\n",
    "    min_date = max(df.dropna().index[0] for df in [y, x])\n",
    "    max_date = min(df.dropna().index[-1] for df in [y, x])\n",
    "    y = y[(y.index>= min_date) & (y.index <= max_date)] \n",
    "    x = x[(x.index >= min_date) & (x.index <= max_date)]\n",
    "    \n",
    "    #Show Chart\n",
    "    fig, ax1 = plt.subplots()\n",
    "    color = 'tab:blue'\n",
    "    ax1.set_xlabel('Time')\n",
    "    ax1.set_xticklabels(x.index, rotation = 45)\n",
    "    ax1.set_ylabel(symbolist[0])\n",
    "    ax1.plot(x, color=color)\n",
    "    ax2 = ax1.twinx()\n",
    "    color = 'tab:orange'\n",
    "    ax2.set_ylabel(symbolist[1])\n",
    "    ax2.plot(y, color=color)\n",
    "    fig.tight_layout()\n",
    "    ax1.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n",
    "    ax2.legend(bbox_to_anchor=(1.05, 0.9), loc=2, borderaxespad=0.)\n",
    "    plt.show()\n",
    "    \n",
    "    #Dotplot + Density Plot\n",
    "    sns.jointplot(y, x,color='b')\n",
    "    plt.show()\n",
    "    \n",
    "    #run Odinary Least Squares regression to find hedge ratio\n",
    "    #and then create spread series\n",
    "    df1 = pd.DataFrame({'y':y,'x':x})\n",
    "    est = sm.OLS(df1.y[-regress_period:],df1.x[-regress_period:])\n",
    "    est = est.fit()\n",
    "    df1['hr'] = -est.params[0]\n",
    "    df1['spread'] = df1.y + (df1.x * df1.hr)\n",
    "    df1['spread'].plot()\n",
    "    plt.title('Residual')\n",
    "    plt.show()\n",
    "    \n",
    "    #Augmented Dickey Fullet Test\n",
    "    cadf = ts.adfuller(df1.spread)\n",
    "    print ('Augmented Dickey Fuller test statistic =',cadf[0])\n",
    "    print ('Augmented Dickey Fuller p-value =',cadf[1])\n",
    "    print ('Augmented Dickey Fuller 1%, 5% and 10% test statistics =',cadf[4])\n",
    "    \n",
    "    #Hurst Exponent Test\n",
    "    def hurst(ts):\n",
    "        \"\"\"Returns the Hurst Exponent of the time series vector ts\"\"\"\n",
    "        # Create the range of lag values\n",
    "        lags = range(2, 20)\n",
    "        \n",
    "        # Calculate the array of the variances of the lagged differences\n",
    "        tau = [sqrt(std(subtract(ts[lag:], ts[:-lag]))) for lag in lags]\n",
    "\n",
    "        # Use a linear fit to estimate the Hurst Exponent\n",
    "        poly = polyfit(log(lags), log(tau), 1)\n",
    "\n",
    "        # Return the Hurst exponent from the polyfit output\n",
    "        return poly[0]*2.0\n",
    "    print (\"Hurst Exponent =\",round(hurst(df1.spread),2))\n",
    "    \n",
    "    #Run OLS regression on spread series and lagged version of itself\n",
    "    spread_lag = df1.spread.shift(1)\n",
    "    spread_lag.iloc[0] = spread_lag.iloc[1]\n",
    "    spread_ret = df1.spread - spread_lag\n",
    "    spread_ret.iloc[0] = spread_ret.iloc[1]\n",
    "    spread_lag2 = sm.add_constant(spread_lag)\n",
    "\n",
    "    model = sm.OLS(spread_ret,spread_lag2)\n",
    "    res = model.fit()\n",
    "\n",
    "    halflife = int(round(-np.log(2) / res.params[1],0))\n",
    "\n",
    "    print  ('Halflife = ',halflife)\n",
    "    \n",
    "    #Z-score\n",
    "    meanSpread = df1.spread.rolling(window=halflife).mean()\n",
    "    stdSpread = df1.spread.rolling(window=halflife).std()\n",
    "    df1['zScore'] = (df1.spread-meanSpread)/stdSpread    \n",
    "    df1['zScore'].plot()\n",
    "    plt.title('Z-score of Residual')\n",
    "    plt.show()\n",
    "    \n",
    "    #Set up trigger signals\n",
    "    entryZscore = zthreshold\n",
    "    exitZscore = 0\n",
    " \n",
    "    #set up num units long/pay            \n",
    "    df1['long entry'] = ((df1.zScore < - entryZscore) & ( df1.zScore.shift(1) > - entryZscore))\n",
    "    df1['long exit'] = ((df1.zScore > - exitZscore) & (df1.zScore.shift(1) < - exitZscore)) \n",
    "    df1['num units long'] = np.nan \n",
    "    df1.loc[df1['long entry'],'num units long'] = 1 \n",
    "    df1.loc[df1['long exit'],'num units long'] = 0 \n",
    "    df1['num units long'][0] = 0 \n",
    "    df1['num units long'] = df1['num units long'].fillna(method='pad') \n",
    "    \n",
    "    #set up num units short/receive\n",
    "    df1['short entry'] = ((df1.zScore >  entryZscore) & ( df1.zScore.shift(1) < entryZscore))\n",
    "    df1['short exit'] = ((df1.zScore < exitZscore) & (df1.zScore.shift(1) > exitZscore))\n",
    "    df1.loc[df1['short entry'],'num units short'] = -1\n",
    "    df1.loc[df1['short exit'],'num units short'] = 0\n",
    "    df1['num units short'][0] = 0\n",
    "    df1['num units short'] = df1['num units short'].fillna(method='pad')\n",
    "    \n",
    "    #Cumulative returns\n",
    "    df1['numUnits'] = df1['num units long'] + df1['num units short']\n",
    "    df1['spread pct ch'] = df1['spread'] - df1['spread'].shift(1)\n",
    "    df1['port rets'] = df1['spread pct ch'] * df1['numUnits'].shift(1)\n",
    "    \n",
    "    df1['cum rets'] = df1['port rets'].cumsum()\n",
    "    \n",
    "    plt.close()\n",
    "    df1['cum rets'].plot()\n",
    "    plt.xlabel('Time')\n",
    "    plt.ylabel('Returns')\n",
    "    plt.title('Cumulative Returns')\n",
    "    plt.show()\n",
    "    \n",
    "    #Calculate Sharp Ratio and Compounded Annual Returns\n",
    "    sharpe = ((df1['port rets'].mean() / df1['port rets'].std()) * sqrt(252))  \n",
    "    \n",
    "    print (\"Sharpe Ratio = {}\".format(round(sharpe,2)))\n",
    "    \n",
    "    print(df1[-10:])\n",
    "    return (df1['cum rets'][-1], sharpe)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 461,
   "metadata": {},
   "outputs": [],
   "source": [
    "def backtestsingle(curve, symbolist, zthreshold, period, regress_period):\n",
    "    x = curve[symbolist[0]][-period:]\n",
    "\n",
    "    \n",
    "    #Show Chart\n",
    "    x.plot(label=symbolist[0])\n",
    "    plt.ylabel('Price')\n",
    "    plt.xlabel('Time')\n",
    "    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n",
    "    plt.show()\n",
    "    \n",
    "    df1 = pd.DataFrame({'x':x})\n",
    "\n",
    "    \n",
    "    #Augmented Dickey Fullet Test\n",
    "    cadf = ts.adfuller(df1.x)\n",
    "    print ('Augmented Dickey Fuller test statistic =',cadf[0])\n",
    "    print ('Augmented Dickey Fuller p-value =',cadf[1])\n",
    "    print ('Augmented Dickey Fuller 1%, 5% and 10% test statistics =',cadf[4])\n",
    "    \n",
    "    #Hurst Exponent Test\n",
    "    def hurst(ts):\n",
    "        \"\"\"Returns the Hurst Exponent of the time series vector ts\"\"\"\n",
    "        # Create the range of lag values\n",
    "        lags = range(2, 20)\n",
    "        \n",
    "        # Calculate the array of the variances of the lagged differences\n",
    "        tau = [sqrt(std(subtract(ts[lag:], ts[:-lag]))) for lag in lags]\n",
    "\n",
    "        # Use a linear fit to estimate the Hurst Exponent\n",
    "        poly = polyfit(log(lags), log(tau), 1)\n",
    "\n",
    "        # Return the Hurst exponent from the polyfit output\n",
    "        return poly[0]*2.0\n",
    "    print (\"Hurst Exponent =\",round(hurst(df1.x),2))\n",
    "    \n",
    "    #Run OLS regression on series and lagged version of itself\n",
    "    spread_lag = df1.x.shift(1)\n",
    "    spread_lag.iloc[0] = spread_lag.iloc[1]\n",
    "    spread_ret = df1.x - spread_lag\n",
    "    spread_ret.iloc[0] = spread_ret.iloc[1]\n",
    "    spread_lag2 = sm.add_constant(spread_lag)\n",
    "\n",
    "    model = sm.OLS(spread_ret,spread_lag2)\n",
    "    res = model.fit()\n",
    "\n",
    "    halflife = int(round(-np.log(2) / res.params[1],0))\n",
    "\n",
    "    print  ('Halflife = ',halflife)\n",
    "    \n",
    "    #Z-score\n",
    "    meanSpread = df1.x.rolling(window=halflife).mean()\n",
    "    stdSpread = df1.x.rolling(window=halflife).std()\n",
    "    df1['zScore'] = (df1.x-meanSpread)/stdSpread    \n",
    "    df1['zScore'].plot()\n",
    "    plt.title('Z-score of Series')\n",
    "    plt.show()\n",
    "    \n",
    "    #Set up trigger signals\n",
    "    entryZscore = zthreshold\n",
    "    exitZscore = 0\n",
    " \n",
    "    #set up num units long/pay            \n",
    "    df1['long entry'] = ((df1.zScore < - entryZscore) & ( df1.zScore.shift(1) > - entryZscore))\n",
    "    df1['long exit'] = ((df1.zScore > - exitZscore) & (df1.zScore.shift(1) < - exitZscore)) \n",
    "    df1['num units long'] = np.nan \n",
    "    df1.loc[df1['long entry'],'num units long'] = 1 \n",
    "    df1.loc[df1['long exit'],'num units long'] = 0 \n",
    "    df1['num units long'][0] = 0 \n",
    "    df1['num units long'] = df1['num units long'].fillna(method='pad') \n",
    "    \n",
    "    #set up num units short/receive\n",
    "    df1['short entry'] = ((df1.zScore >  entryZscore) & ( df1.zScore.shift(1) < entryZscore))\n",
    "    df1['short exit'] = ((df1.zScore < exitZscore) & (df1.zScore.shift(1) > exitZscore))\n",
    "    df1.loc[df1['short entry'],'num units short'] = -1\n",
    "    df1.loc[df1['short exit'],'num units short'] = 0\n",
    "    df1['num units short'][0] = 0\n",
    "    df1['num units short'] = df1['num units short'].fillna(method='pad')\n",
    "    \n",
    "    #Cumulative returns\n",
    "    df1['numUnits'] = df1['num units long'] + df1['num units short']\n",
    "    df1['spread pct ch'] = df1['x'] - df1['x'].shift(1)\n",
    "    df1['port rets'] = df1['spread pct ch'] * df1['numUnits'].shift(1)\n",
    "    \n",
    "    df1['cum rets'] = df1['port rets'].cumsum()\n",
    "    \n",
    "    plt.close()\n",
    "    df1['cum rets'].plot()\n",
    "    plt.xlabel('Time')\n",
    "    plt.ylabel('Returns')\n",
    "    plt.title('Cumulative Returns')\n",
    "    plt.show()\n",
    "    \n",
    "    #Calculate Sharp Ratio and Compounded Annual Returns\n",
    "    sharpe = ((df1['port rets'].mean() / df1['port rets'].std()) * sqrt(252))  \n",
    "    \n",
    "    print (\"Sharpe Ratio = {}\".format(round(sharpe,2)))\n",
    "    print (df1['cum rets'][-1])\n",
    "    return (df1['cum rets'][-1], sharpe)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 324,
   "metadata": {},
   "outputs": [],
   "source": [
    "def annualised_sharpe(returns, N=252):\n",
    "    return np.sqrt(N) * (returns.mean() / returns.std())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 591,
   "metadata": {},
   "outputs": [],
   "source": [
    "zscore_threshold = np.linspace(1, 3,6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 592,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1. , 1.4, 1.8, 2.2, 2.6, 3. ])"
      ]
     },
     "execution_count": 592,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "zscore_threshold"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 602,
   "metadata": {},
   "outputs": [],
   "source": [
    "regress_period = np.linspace(30, 250, 5, dtype=int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 603,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 30,  85, 140, 195, 250])"
      ]
     },
     "execution_count": 603,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regress_period"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 604,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0.]])"
      ]
     },
     "execution_count": 604,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_pnl = np.zeros((len(zscore_threshold),len(regress_period)))\n",
    "results_sharpe = np.zeros((len(zscore_threshold),len(regress_period)))\n",
    "results_sharpe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 605,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sharpe Ratio = 4.09\n",
      "Sharpe Ratio = 4.0\n",
      "Sharpe Ratio = 3.98\n",
      "Sharpe Ratio = 3.74\n",
      "Sharpe Ratio = 3.7\n",
      "Sharpe Ratio = 3.56\n",
      "Sharpe Ratio = 3.68\n",
      "Sharpe Ratio = 3.73\n",
      "Sharpe Ratio = 3.83\n",
      "Sharpe Ratio = 4.04\n",
      "Sharpe Ratio = 2.99\n",
      "Sharpe Ratio = 2.97\n",
      "Sharpe Ratio = 3.06\n",
      "Sharpe Ratio = 3.13\n",
      "Sharpe Ratio = 3.64\n",
      "Sharpe Ratio = 2.37\n",
      "Sharpe Ratio = 2.39\n",
      "Sharpe Ratio = 2.4\n",
      "Sharpe Ratio = 2.22\n",
      "Sharpe Ratio = 2.4\n",
      "Sharpe Ratio = 1.81\n",
      "Sharpe Ratio = 1.81\n",
      "Sharpe Ratio = 1.81\n",
      "Sharpe Ratio = 1.8\n",
      "Sharpe Ratio = 1.75\n",
      "Sharpe Ratio = 1.16\n",
      "Sharpe Ratio = 1.16\n",
      "Sharpe Ratio = 1.16\n",
      "Sharpe Ratio = 1.16\n",
      "Sharpe Ratio = 1.58\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for i, a in enumerate(zscore_threshold):\n",
    "    for j, b in enumerate(regress_period):\n",
    "        pnl, sharpe = backtestcorr_opt(uscurve,symbolist,a,499,b)\n",
    "        results_pnl[i,j] = pnl\n",
    "        results_sharpe[i,j] = sharpe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 611,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.pcolor(regress_period,zscore_threshold,results_pnl)\n",
    "plt.colorbar()\n",
    "plt.title('PnL')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 612,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.pcolor(regress_period,zscore_threshold,results_sharpe)\n",
    "plt.colorbar()\n",
    "plt.title('Sharpe')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 606,
   "metadata": {},
   "outputs": [],
   "source": [
    "def backtestcorr_opt(curve, symbolist, zthreshold, period, regress_period):\n",
    "    x = curve[symbolist[0]][-period:]\n",
    "    y = curve[symbolist[1]][-period:]\n",
    "    \n",
    "    #make sure DataFrames are the same length\n",
    "    min_date = max(df.dropna().index[0] for df in [y, x])\n",
    "    max_date = min(df.dropna().index[-1] for df in [y, x])\n",
    "    y = y[(y.index>= min_date) & (y.index <= max_date)] \n",
    "    x = x[(x.index >= min_date) & (x.index <= max_date)]\n",
    "    \n",
    "  \n",
    "    #run Odinary Least Squares regression to find hedge ratio\n",
    "    #and then create spread series\n",
    "    df1 = pd.DataFrame({'y':y,'x':x})\n",
    "    est = sm.OLS(df1.y[-regress_period:],df1.x[-regress_period:])\n",
    "    est = est.fit()\n",
    "    df1['hr'] = -est.params[0]\n",
    "    df1['spread'] = df1.y + (df1.x * df1.hr)\n",
    "\n",
    "    #Run OLS regression on series and lagged version of itself\n",
    "    spread_lag = df1.x.shift(1)\n",
    "    spread_lag.iloc[0] = spread_lag.iloc[1]\n",
    "    spread_ret = df1.x - spread_lag\n",
    "    spread_ret.iloc[0] = spread_ret.iloc[1]\n",
    "    spread_lag2 = sm.add_constant(spread_lag)\n",
    "\n",
    "    model = sm.OLS(spread_ret,spread_lag2)\n",
    "    res = model.fit()\n",
    "\n",
    "    halflife = int(round(-np.log(2) / res.params[1],0))\n",
    "\n",
    "    #Z-score\n",
    "    meanSpread = df1.spread.rolling(window=halflife).mean()\n",
    "    stdSpread = df1.spread.rolling(window=halflife).std()\n",
    "    df1['zScore'] = (df1.spread-meanSpread)/stdSpread    \n",
    "\n",
    "    #Set up trigger signals\n",
    "    entryZscore = zthreshold\n",
    "    exitZscore = 0\n",
    " \n",
    "    #set up num units long/pay            \n",
    "    df1['long entry'] = ((df1.zScore < - entryZscore) & ( df1.zScore.shift(1) > - entryZscore))\n",
    "    df1['long exit'] = ((df1.zScore > - exitZscore) & (df1.zScore.shift(1) < - exitZscore)) \n",
    "    df1['num units long'] = np.nan \n",
    "    df1.loc[df1['long entry'],'num units long'] = 1 \n",
    "    df1.loc[df1['long exit'],'num units long'] = 0 \n",
    "    df1['num units long'][0] = 0 \n",
    "    df1['num units long'] = df1['num units long'].fillna(method='pad') \n",
    "    \n",
    "    #set up num units short/receive\n",
    "    df1['short entry'] = ((df1.zScore >  entryZscore) & ( df1.zScore.shift(1) < entryZscore))\n",
    "    df1['short exit'] = ((df1.zScore < exitZscore) & (df1.zScore.shift(1) > exitZscore))\n",
    "    df1.loc[df1['short entry'],'num units short'] = -1\n",
    "    df1.loc[df1['short exit'],'num units short'] = 0\n",
    "    df1['num units short'][0] = 0\n",
    "    df1['num units short'] = df1['num units short'].fillna(method='pad')\n",
    "    \n",
    "    #Cumulative returns\n",
    "    df1['numUnits'] = df1['num units long'] + df1['num units short']\n",
    "    df1['spread pct ch'] = df1['spread'] - df1['spread'].shift(1)\n",
    "    df1['port rets'] = df1['spread pct ch'] * df1['numUnits'].shift(1)\n",
    "    df1['cum rets'] = df1['port rets'].cumsum()\n",
    "\n",
    "    \n",
    "    #Calculate Sharp Ratio and Compounded Annual Returns\n",
    "    sharpe = ((df1['port rets'].mean() / df1['port rets'].std()) * sqrt(252))  \n",
    "    \n",
    "    print (\"Sharpe Ratio = {}\".format(round(sharpe,2)))\n",
    "\n",
    "    return (df1['cum rets'][-1], sharpe)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 491,
   "metadata": {},
   "outputs": [],
   "source": [
    "def backtestsingle_opt(curve, symbolist, zthreshold, period, regress_period):\n",
    "    x = curve[symbolist[0]][-period:]\n",
    "\n",
    "    df1 = pd.DataFrame({'x':x})\n",
    "\n",
    "    #Run OLS regression on series and lagged version of itself\n",
    "    spread_lag = df1.x.shift(1)\n",
    "    spread_lag.iloc[0] = spread_lag.iloc[1]\n",
    "    spread_ret = df1.x - spread_lag\n",
    "    spread_ret.iloc[0] = spread_ret.iloc[1]\n",
    "    spread_lag2 = sm.add_constant(spread_lag)\n",
    "\n",
    "    model = sm.OLS(spread_ret,spread_lag2)\n",
    "    res = model.fit()\n",
    "\n",
    "    halflife = int(round(-np.log(2) / res.params[1],0))\n",
    "    \n",
    "    #Z-score\n",
    "    meanSpread = df1.x.rolling(window=halflife).mean()\n",
    "    stdSpread = df1.x.rolling(window=halflife).std()\n",
    "    df1['zScore'] = (df1.x-meanSpread)/stdSpread    \n",
    "\n",
    "    \n",
    "    #Set up trigger signals\n",
    "    entryZscore = zthreshold\n",
    "    exitZscore = 0\n",
    " \n",
    "    #set up num units long/pay            \n",
    "    df1['long entry'] = ((df1.zScore < - entryZscore) & ( df1.zScore.shift(1) > - entryZscore))\n",
    "    df1['long exit'] = ((df1.zScore > - exitZscore) & (df1.zScore.shift(1) < - exitZscore)) \n",
    "    df1['num units long'] = np.nan \n",
    "    df1.loc[df1['long entry'],'num units long'] = 1 \n",
    "    df1.loc[df1['long exit'],'num units long'] = 0 \n",
    "    df1['num units long'][0] = 0 \n",
    "    df1['num units long'] = df1['num units long'].fillna(method='pad') \n",
    "    \n",
    "    #set up num units short/receive\n",
    "    df1['short entry'] = ((df1.zScore >  entryZscore) & ( df1.zScore.shift(1) < entryZscore))\n",
    "    df1['short exit'] = ((df1.zScore < exitZscore) & (df1.zScore.shift(1) > exitZscore))\n",
    "    df1.loc[df1['short entry'],'num units short'] = -1\n",
    "    df1.loc[df1['short exit'],'num units short'] = 0\n",
    "    df1['num units short'][0] = 0\n",
    "    df1['num units short'] = df1['num units short'].fillna(method='pad')\n",
    "    \n",
    "    #Cumulative returns\n",
    "    df1['numUnits'] = df1['num units long'] + df1['num units short']\n",
    "    df1['spread pct ch'] = df1['x'] - df1['x'].shift(1)\n",
    "    df1['port rets'] = df1['spread pct ch'] * df1['numUnits'].shift(1)\n",
    "    \n",
    "    df1['cum rets'] = df1['port rets'].cumsum()\n",
    "    \n",
    "    #Calculate Sharp Ratio and Compounded Annual Returns\n",
    "    sharpe = ((df1['port rets'].mean() / df1['port rets'].std()) * sqrt(252))  \n",
    "    \n",
    "    print (\"Sharpe Ratio = {}\".format(round(sharpe,2)))\n",
    "    print (df1['cum rets'][-1])\n",
    "    \n",
    "    return (df1['cum rets'][-1], sharpe)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 422,
   "metadata": {},
   "outputs": [],
   "source": [
    "def backtest_opt(curve, symbolist, zthreshold, period, regress_period):\n",
    "    if len(symbolist) > 1:\n",
    "        backtestcorr_opt(curve, symbolist, zthreshold, period, regress_period)\n",
    "    else:\n",
    "        backtestsingle_opt(curve, symbolist, zthreshold, period, regress_period)\n",
    "    return "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 597,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0.],\n",
       "       [0., 0., 0., 0., 0., 0.]])"
      ]
     },
     "execution_count": 597,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_pnl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 533,
   "metadata": {},
   "outputs": [],
   "source": [
    "results_pnl[0,0]=pnl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 524,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.options.mode.chained_assignment = None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda root]",
   "language": "python",
   "name": "conda-root-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
