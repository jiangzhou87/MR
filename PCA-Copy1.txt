{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "D:\\Anaconda\\lib\\site-packages\\ipykernel\\__main__.py:4: FutureWarning: The pandas.core.datetools module is deprecated and will be removed in a future version. Please use the pandas.tseries module instead.\n"
     ]
    }
   ],
   "source": [
    "#import needed modules\n",
    "from datetime import datetime\n",
    "\n",
    "from pandas.core import datetools\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from numpy import log, polyfit, sqrt, std, subtract\n",
    "import statsmodels.tsa.stattools as ts\n",
    "import statsmodels.api as sm\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import pprint\n",
    "import pylab as plt\n",
    "\n",
    "import sklearn\n",
    "from sklearn import decomposition\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn import datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "uscurve = pd.read_csv('Data/bchartswaprate.csv', parse_dates=True, index_col=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "uscurve = uscurve.iloc[::-1]\n",
    "uscurve = uscurve*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>10y</th>\n",
       "      <th>5y</th>\n",
       "      <th>1y</th>\n",
       "      <th>2y</th>\n",
       "      <th>3y</th>\n",
       "      <th>7y</th>\n",
       "      <th>15y</th>\n",
       "      <th>30y</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-05-22</th>\n",
       "      <td>3.085</td>\n",
       "      <td>2.995</td>\n",
       "      <td>2.543</td>\n",
       "      <td>2.806</td>\n",
       "      <td>2.914</td>\n",
       "      <td>3.039</td>\n",
       "      <td>3.097</td>\n",
       "      <td>3.107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-23</th>\n",
       "      <td>3.029</td>\n",
       "      <td>2.935</td>\n",
       "      <td>2.511</td>\n",
       "      <td>2.762</td>\n",
       "      <td>2.858</td>\n",
       "      <td>2.980</td>\n",
       "      <td>3.096</td>\n",
       "      <td>3.052</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-24</th>\n",
       "      <td>3.010</td>\n",
       "      <td>2.914</td>\n",
       "      <td>2.485</td>\n",
       "      <td>2.741</td>\n",
       "      <td>2.840</td>\n",
       "      <td>2.958</td>\n",
       "      <td>3.035</td>\n",
       "      <td>3.028</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-25</th>\n",
       "      <td>2.966</td>\n",
       "      <td>2.869</td>\n",
       "      <td>2.486</td>\n",
       "      <td>2.707</td>\n",
       "      <td>2.793</td>\n",
       "      <td>2.912</td>\n",
       "      <td>3.014</td>\n",
       "      <td>2.993</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-28</th>\n",
       "      <td>2.941</td>\n",
       "      <td>2.844</td>\n",
       "      <td>2.474</td>\n",
       "      <td>2.691</td>\n",
       "      <td>2.771</td>\n",
       "      <td>2.882</td>\n",
       "      <td>2.973</td>\n",
       "      <td>2.975</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-29</th>\n",
       "      <td>2.805</td>\n",
       "      <td>2.687</td>\n",
       "      <td>2.412</td>\n",
       "      <td>2.565</td>\n",
       "      <td>2.623</td>\n",
       "      <td>2.737</td>\n",
       "      <td>2.834</td>\n",
       "      <td>2.854</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-30</th>\n",
       "      <td>2.882</td>\n",
       "      <td>2.783</td>\n",
       "      <td>2.465</td>\n",
       "      <td>2.655</td>\n",
       "      <td>2.726</td>\n",
       "      <td>2.826</td>\n",
       "      <td>2.902</td>\n",
       "      <td>2.915</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-05-31</th>\n",
       "      <td>2.913</td>\n",
       "      <td>2.831</td>\n",
       "      <td>2.490</td>\n",
       "      <td>2.698</td>\n",
       "      <td>2.773</td>\n",
       "      <td>2.863</td>\n",
       "      <td>2.918</td>\n",
       "      <td>2.938</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-06-01</th>\n",
       "      <td>2.957</td>\n",
       "      <td>2.877</td>\n",
       "      <td>2.519</td>\n",
       "      <td>2.734</td>\n",
       "      <td>2.819</td>\n",
       "      <td>2.910</td>\n",
       "      <td>2.961</td>\n",
       "      <td>2.976</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-06-04</th>\n",
       "      <td>3.002</td>\n",
       "      <td>2.928</td>\n",
       "      <td>2.548</td>\n",
       "      <td>2.783</td>\n",
       "      <td>2.869</td>\n",
       "      <td>2.955</td>\n",
       "      <td>3.003</td>\n",
       "      <td>3.010</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              10y     5y     1y     2y     3y     7y    15y    30y\n",
       "Time                                                              \n",
       "2018-05-22  3.085  2.995  2.543  2.806  2.914  3.039  3.097  3.107\n",
       "2018-05-23  3.029  2.935  2.511  2.762  2.858  2.980  3.096  3.052\n",
       "2018-05-24  3.010  2.914  2.485  2.741  2.840  2.958  3.035  3.028\n",
       "2018-05-25  2.966  2.869  2.486  2.707  2.793  2.912  3.014  2.993\n",
       "2018-05-28  2.941  2.844  2.474  2.691  2.771  2.882  2.973  2.975\n",
       "2018-05-29  2.805  2.687  2.412  2.565  2.623  2.737  2.834  2.854\n",
       "2018-05-30  2.882  2.783  2.465  2.655  2.726  2.826  2.902  2.915\n",
       "2018-05-31  2.913  2.831  2.490  2.698  2.773  2.863  2.918  2.938\n",
       "2018-06-01  2.957  2.877  2.519  2.734  2.819  2.910  2.961  2.976\n",
       "2018-06-04  3.002  2.928  2.548  2.783  2.869  2.955  3.003  3.010"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "uscurve[-10:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([9.57750781e-01, 3.31766286e-02, 7.84618556e-03, 1.03227597e-03,\n",
       "       1.26850879e-04, 4.03137185e-05, 1.47459072e-05, 1.22180043e-05])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca = decomposition.PCA()\n",
    "uscurve_pca = pca.fit_transform(uscurve[-475:])\n",
    "pca.explained_variance_ratio_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "comps = pd.DataFrame(pca.components_, columns=uscurve.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10y</th>\n",
       "      <td>0.326075</td>\n",
       "      <td>0.346580</td>\n",
       "      <td>0.246435</td>\n",
       "      <td>-0.047919</td>\n",
       "      <td>0.255334</td>\n",
       "      <td>-0.045284</td>\n",
       "      <td>-0.630104</td>\n",
       "      <td>0.496239</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5y</th>\n",
       "      <td>0.381889</td>\n",
       "      <td>0.080184</td>\n",
       "      <td>0.198542</td>\n",
       "      <td>0.380858</td>\n",
       "      <td>0.153052</td>\n",
       "      <td>-0.140303</td>\n",
       "      <td>0.677999</td>\n",
       "      <td>0.400584</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1y</th>\n",
       "      <td>0.361724</td>\n",
       "      <td>-0.568899</td>\n",
       "      <td>-0.073146</td>\n",
       "      <td>-0.511530</td>\n",
       "      <td>0.520683</td>\n",
       "      <td>0.034755</td>\n",
       "      <td>0.075290</td>\n",
       "      <td>-0.022571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2y</th>\n",
       "      <td>0.398354</td>\n",
       "      <td>-0.393528</td>\n",
       "      <td>-0.022748</td>\n",
       "      <td>0.041078</td>\n",
       "      <td>-0.604288</td>\n",
       "      <td>-0.528678</td>\n",
       "      <td>-0.193802</td>\n",
       "      <td>0.044956</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3y</th>\n",
       "      <td>0.399814</td>\n",
       "      <td>-0.200772</td>\n",
       "      <td>0.100630</td>\n",
       "      <td>0.272255</td>\n",
       "      <td>-0.255967</td>\n",
       "      <td>0.793997</td>\n",
       "      <td>-0.112002</td>\n",
       "      <td>-0.084232</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7y</th>\n",
       "      <td>0.356932</td>\n",
       "      <td>0.236067</td>\n",
       "      <td>0.227621</td>\n",
       "      <td>0.233324</td>\n",
       "      <td>0.266583</td>\n",
       "      <td>-0.235778</td>\n",
       "      <td>-0.087099</td>\n",
       "      <td>-0.759195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15y</th>\n",
       "      <td>0.325314</td>\n",
       "      <td>0.303863</td>\n",
       "      <td>-0.892438</td>\n",
       "      <td>0.059634</td>\n",
       "      <td>0.038142</td>\n",
       "      <td>0.018662</td>\n",
       "      <td>0.000536</td>\n",
       "      <td>0.005722</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30y</th>\n",
       "      <td>0.255391</td>\n",
       "      <td>0.454503</td>\n",
       "      <td>0.188679</td>\n",
       "      <td>-0.676152</td>\n",
       "      <td>-0.370221</td>\n",
       "      <td>0.105759</td>\n",
       "      <td>0.282714</td>\n",
       "      <td>-0.085115</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            0         1         2         3         4         5         6  \\\n",
       "10y  0.326075  0.346580  0.246435 -0.047919  0.255334 -0.045284 -0.630104   \n",
       "5y   0.381889  0.080184  0.198542  0.380858  0.153052 -0.140303  0.677999   \n",
       "1y   0.361724 -0.568899 -0.073146 -0.511530  0.520683  0.034755  0.075290   \n",
       "2y   0.398354 -0.393528 -0.022748  0.041078 -0.604288 -0.528678 -0.193802   \n",
       "3y   0.399814 -0.200772  0.100630  0.272255 -0.255967  0.793997 -0.112002   \n",
       "7y   0.356932  0.236067  0.227621  0.233324  0.266583 -0.235778 -0.087099   \n",
       "15y  0.325314  0.303863 -0.892438  0.059634  0.038142  0.018662  0.000536   \n",
       "30y  0.255391  0.454503  0.188679 -0.676152 -0.370221  0.105759  0.282714   \n",
       "\n",
       "            7  \n",
       "10y  0.496239  \n",
       "5y   0.400584  \n",
       "1y  -0.022571  \n",
       "2y   0.044956  \n",
       "3y  -0.084232  \n",
       "7y  -0.759195  \n",
       "15y  0.005722  \n",
       "30y -0.085115  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = comps.T\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2a8abb65c88>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(comps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "comps = comps.transpose()[:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10y</th>\n",
       "      <td>0.326075</td>\n",
       "      <td>0.346580</td>\n",
       "      <td>0.246435</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5y</th>\n",
       "      <td>0.381889</td>\n",
       "      <td>0.080184</td>\n",
       "      <td>0.198542</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1y</th>\n",
       "      <td>0.361724</td>\n",
       "      <td>-0.568899</td>\n",
       "      <td>-0.073146</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            0         1         2\n",
       "10y  0.326075  0.346580  0.246435\n",
       "5y   0.381889  0.080184  0.198542\n",
       "1y   0.361724 -0.568899 -0.073146"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "comps.plot()\n",
    "plt.show()\n",
    "comps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'DataFrame' object has no attribute 'summary'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-22-10272e32d313>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mcomps\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msummary\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32mD:\\Anaconda\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[1;34m(self, name)\u001b[0m\n\u001b[0;32m   3612\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3613\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 3614\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   3615\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3616\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mname\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'summary'"
     ]
    }
   ],
   "source": [
    "comps.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PCA(copy=True, iterated_power='auto', n_components=2, random_state=None,\n",
       "  svd_solver='auto', tol=0.0, whiten=False)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca = PCA(n_components=2)\n",
    "uscurve = uscurve.fillna(method='backfill')\n",
    "pca.fit(uscurve)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0.33429833  0.38520861  0.35549092  0.39288415  0.39824966  0.36269323\n",
      "   0.31623399  0.26262918]\n",
      " [ 0.35328266  0.08192499 -0.57262078 -0.40038135 -0.20329647  0.23958355\n",
      "   0.26953356  0.45705776]]\n"
     ]
    }
   ],
   "source": [
    "print(pca.components_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1.7949573  0.05407661]\n"
     ]
    }
   ],
   "source": [
    "print(pca.explained_variance_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "too many values to unpack (expected 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-62-3f06ce3bb24b>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m     10\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mlength\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mvector\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mpca\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mexplained_variance_\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mpca\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcomponents_\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     11\u001b[0m     \u001b[0mv\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mvector\u001b[0m \u001b[1;33m*\u001b[0m \u001b[1;36m3\u001b[0m \u001b[1;33m*\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msqrt\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlength\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 12\u001b[1;33m     \u001b[0mdraw_vector\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mpca\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmean_\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mpca\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmean_\u001b[0m \u001b[1;33m+\u001b[0m \u001b[0mv\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     13\u001b[0m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'equal'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m;\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<ipython-input-62-3f06ce3bb24b>\u001b[0m in \u001b[0;36mdraw_vector\u001b[1;34m(v0, v1, ax)\u001b[0m\n\u001b[0;32m      4\u001b[0m                     \u001b[0mlinewidth\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m                     shrinkA=0, shrinkB=0)\n\u001b[1;32m----> 6\u001b[1;33m     \u001b[0max\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mannotate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m''\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mv1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mv0\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0marrowprops\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0marrowprops\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      7\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      8\u001b[0m \u001b[1;31m# plot data\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\Anaconda\\lib\\site-packages\\matplotlib\\axes\\_axes.py\u001b[0m in \u001b[0;36mannotate\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m    645\u001b[0m     \u001b[1;33m@\u001b[0m\u001b[0mdocstring\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdedent_interpd\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    646\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mannotate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 647\u001b[1;33m         \u001b[0ma\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mmtext\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mAnnotation\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    648\u001b[0m         \u001b[0ma\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mset_transform\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmtransforms\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mIdentityTransform\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    649\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[1;34m'clip_on'\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\Anaconda\\lib\\site-packages\\matplotlib\\text.py\u001b[0m in \u001b[0;36m__init__\u001b[1;34m(self, s, xy, xytext, xycoords, textcoords, arrowprops, annotation_clip, **kwargs)\u001b[0m\n\u001b[0;32m   2106\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mxytext\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2107\u001b[0m             \u001b[0mxytext\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mxy\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2108\u001b[1;33m         \u001b[0mx\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mxytext\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   2109\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2110\u001b[0m         \u001b[0mText\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mx\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0ms\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: too many values to unpack (expected 2)"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def draw_vector(v0, v1, ax=None):\n",
    "    ax = ax or plt.gca()\n",
    "    arrowprops=dict(arrowstyle='->',\n",
    "                    linewidth=2,\n",
    "                    shrinkA=0, shrinkB=0)\n",
    "    ax.annotate('', v1, v0, arrowprops=arrowprops)\n",
    "\n",
    "# plot data\n",
    "plt.scatter(uscurve.iloc[:,0],uscurve.iloc[:,1],alpha=0.2)\n",
    "for length, vector in zip(pca.explained_variance_, pca.components_):\n",
    "    v = vector * 3 * np.sqrt(length)\n",
    "    draw_vector(pca.mean_, pca.mean_ + v)\n",
    "plt.axis('equal');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.17751385, 0.201287  , 0.17753141, 0.2000614 , 0.20491525,\n",
       "        0.19137854, 0.17258449, 0.14253889],\n",
       "       [0.201287  , 0.23436522, 0.21787169, 0.24147904, 0.24369904,\n",
       "        0.21977728, 0.19773972, 0.15802549],\n",
       "       [0.17753141, 0.21787169, 0.22774985, 0.24275018, 0.23724018,\n",
       "        0.19863605, 0.17941151, 0.13378511],\n",
       "       [0.2000614 , 0.24147904, 0.24275018, 0.26245071, 0.25906662,\n",
       "        0.2221546 , 0.2008769 , 0.15272311],\n",
       "       [0.20491525, 0.24369904, 0.23724018, 0.25906662, 0.25817966,\n",
       "        0.22597041, 0.20346711, 0.15819123],\n",
       "       [0.19137854, 0.21977728, 0.19863605, 0.2221546 , 0.22597041,\n",
       "        0.20762528, 0.18702563, 0.15198831],\n",
       "       [0.17258449, 0.19773972, 0.17941151, 0.2008769 , 0.20346711,\n",
       "        0.18702563, 0.18479429, 0.13823485],\n",
       "       [0.14253889, 0.15802549, 0.13378511, 0.15272311, 0.15819123,\n",
       "        0.15198831, 0.13823485, 0.11703474]])"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca.get_covariance()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "cov = pd.DataFrame(pca.get_covariance(),index = uscurve.columns, columns=uscurve.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>10y</th>\n",
       "      <th>5y</th>\n",
       "      <th>1y</th>\n",
       "      <th>2y</th>\n",
       "      <th>3y</th>\n",
       "      <th>7y</th>\n",
       "      <th>15y</th>\n",
       "      <th>30y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10y</th>\n",
       "      <td>0.177514</td>\n",
       "      <td>0.201287</td>\n",
       "      <td>0.177531</td>\n",
       "      <td>0.200061</td>\n",
       "      <td>0.204915</td>\n",
       "      <td>0.191379</td>\n",
       "      <td>0.172584</td>\n",
       "      <td>0.142539</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5y</th>\n",
       "      <td>0.201287</td>\n",
       "      <td>0.234365</td>\n",
       "      <td>0.217872</td>\n",
       "      <td>0.241479</td>\n",
       "      <td>0.243699</td>\n",
       "      <td>0.219777</td>\n",
       "      <td>0.197740</td>\n",
       "      <td>0.158025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1y</th>\n",
       "      <td>0.177531</td>\n",
       "      <td>0.217872</td>\n",
       "      <td>0.227750</td>\n",
       "      <td>0.242750</td>\n",
       "      <td>0.237240</td>\n",
       "      <td>0.198636</td>\n",
       "      <td>0.179412</td>\n",
       "      <td>0.133785</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2y</th>\n",
       "      <td>0.200061</td>\n",
       "      <td>0.241479</td>\n",
       "      <td>0.242750</td>\n",
       "      <td>0.262451</td>\n",
       "      <td>0.259067</td>\n",
       "      <td>0.222155</td>\n",
       "      <td>0.200877</td>\n",
       "      <td>0.152723</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3y</th>\n",
       "      <td>0.204915</td>\n",
       "      <td>0.243699</td>\n",
       "      <td>0.237240</td>\n",
       "      <td>0.259067</td>\n",
       "      <td>0.258180</td>\n",
       "      <td>0.225970</td>\n",
       "      <td>0.203467</td>\n",
       "      <td>0.158191</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7y</th>\n",
       "      <td>0.191379</td>\n",
       "      <td>0.219777</td>\n",
       "      <td>0.198636</td>\n",
       "      <td>0.222155</td>\n",
       "      <td>0.225970</td>\n",
       "      <td>0.207625</td>\n",
       "      <td>0.187026</td>\n",
       "      <td>0.151988</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15y</th>\n",
       "      <td>0.172584</td>\n",
       "      <td>0.197740</td>\n",
       "      <td>0.179412</td>\n",
       "      <td>0.200877</td>\n",
       "      <td>0.203467</td>\n",
       "      <td>0.187026</td>\n",
       "      <td>0.184794</td>\n",
       "      <td>0.138235</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30y</th>\n",
       "      <td>0.142539</td>\n",
       "      <td>0.158025</td>\n",
       "      <td>0.133785</td>\n",
       "      <td>0.152723</td>\n",
       "      <td>0.158191</td>\n",
       "      <td>0.151988</td>\n",
       "      <td>0.138235</td>\n",
       "      <td>0.117035</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          10y        5y        1y        2y        3y        7y       15y  \\\n",
       "10y  0.177514  0.201287  0.177531  0.200061  0.204915  0.191379  0.172584   \n",
       "5y   0.201287  0.234365  0.217872  0.241479  0.243699  0.219777  0.197740   \n",
       "1y   0.177531  0.217872  0.227750  0.242750  0.237240  0.198636  0.179412   \n",
       "2y   0.200061  0.241479  0.242750  0.262451  0.259067  0.222155  0.200877   \n",
       "3y   0.204915  0.243699  0.237240  0.259067  0.258180  0.225970  0.203467   \n",
       "7y   0.191379  0.219777  0.198636  0.222155  0.225970  0.207625  0.187026   \n",
       "15y  0.172584  0.197740  0.179412  0.200877  0.203467  0.187026  0.184794   \n",
       "30y  0.142539  0.158025  0.133785  0.152723  0.158191  0.151988  0.138235   \n",
       "\n",
       "          30y  \n",
       "10y  0.142539  \n",
       "5y   0.158025  \n",
       "1y   0.133785  \n",
       "2y   0.152723  \n",
       "3y   0.158191  \n",
       "7y   0.151988  \n",
       "15y  0.138235  \n",
       "30y  0.117035  "
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cov"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:Anaconda]",
   "language": "python",
   "name": "conda-env-Anaconda-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
