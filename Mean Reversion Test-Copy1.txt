{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import needed modules\n",
    "from datetime import datetime\n",
    "from pandas_datareader import data\n",
    "from pandas.core import datetools\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from numpy import log, polyfit, sqrt, std, subtract\n",
    "import statsmodels.tsa.stattools as ts\n",
    "import statsmodels.api as sm\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import pprint"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [],
   "source": [
    " #choose ticker pairs for our testing\n",
    "symbolist = ['MSFT','SPX']\n",
    " \n",
    "start_date = '2003/01/01'\n",
    "end_date = datetime.now()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [],
   "source": [
    "close_px_all = pd.read_csv('examples/stock_px_2.csv', parse_dates=True, index_col=0)\n",
    "y = close_px_all[symbolist[0]]\n",
    "x = close_px_all[symbolist[1]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'SPX'"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "symbolist[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [],
   "source": [
    " \n",
    "#make sure DataFrames are the same length\n",
    "min_date = max(df.dropna().index[0] for df in [y, x])\n",
    "max_date = min(df.dropna().index[-1] for df in [y, x])\n",
    " \n",
    "y = y[(y.index>= min_date) & (y.index <= max_date)] \n",
    "x = x[(x.index >= min_date) & (x.index <= max_date)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(y, label=symbolist[0])\n",
    "plt.plot(x, label=symbolist[1])\n",
    "plt.ylabel('Price')\n",
    "plt.xlabel('Time')\n",
    "plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "D:\\Anaconda\\lib\\site-packages\\matplotlib\\axes\\_axes.py:6462: UserWarning: The 'normed' kwarg is deprecated, and has been replaced by the 'density' kwarg.\n",
      "  warnings.warn(\"The 'normed' kwarg is deprecated, and has been \"\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.jointplot(y, x,color='b')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [],
   "source": [
    "#run Odinary Least Squares regression to find hedge ratio\n",
    "#and then create spread series\n",
    "df1 = pd.DataFrame({'y':y,'x':x})\n",
    "est = sm.OLS(df1.y,df1.x)\n",
    "est = est.fit()\n",
    "df1['hr'] = -est.params[0]\n",
    "df1['spread'] = df1.y + (df1.x * df1.hr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(df1.spread)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Augmented Dickey Fuller test statistic = -2.7943663508194807\n",
      "Augmented Dickey Fuller p-value = 0.059083011796343\n",
      "Augmented Dickey Fuller 1%, 5% and 10% test statistics = {'1%': -3.4333083829182174, '5%': -2.8628469233690756, '10%': -2.567465738507758}\n"
     ]
    }
   ],
   "source": [
    "cadf = ts.adfuller(df1.spread)\n",
    "print ('Augmented Dickey Fuller test statistic =',cadf[0])\n",
    "print ('Augmented Dickey Fuller p-value =',cadf[1])\n",
    "print ('Augmented Dickey Fuller 1%, 5% and 10% test statistics =',cadf[4])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [],
   "source": [
    "def hurst(ts):\n",
    "    \"\"\"Returns the Hurst Exponent of the time series vector ts\"\"\"\n",
    "    # Create the range of lag values\n",
    "    lags = range(2, 20)\n",
    "    \n",
    "    # Calculate the array of the variances of the lagged differences\n",
    "    tau = [sqrt(std(subtract(ts[lag:], ts[:-lag]))) for lag in lags]\n",
    "\n",
    "    # Use a linear fit to estimate the Hurst Exponent\n",
    "    poly = polyfit(log(lags), log(tau), 1)\n",
    "\n",
    "    # Return the Hurst exponent from the polyfit output\n",
    "    return poly[0]*2.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hurst Exponent = 0.48\n"
     ]
    }
   ],
   "source": [
    "print (\"Hurst Exponent =\",round(hurst(df1.spread),2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Halflife =  99\n"
     ]
    }
   ],
   "source": [
    "#Run OLS regression on spread series and lagged version of itself\n",
    "spread_lag = df1.spread.shift(1)\n",
    "spread_lag.iloc[0] = spread_lag.iloc[1]\n",
    "spread_ret = df1.spread - spread_lag\n",
    "spread_ret.iloc[0] = spread_ret.iloc[1]\n",
    "spread_lag2 = sm.add_constant(spread_lag)\n",
    "\n",
    "model = sm.OLS(spread_ret,spread_lag2)\n",
    "res = model.fit()\n",
    "\n",
    "halflife = int(round(-np.log(2) / res.params[1],0))\n",
    "\n",
    "print  ('Halflife = ',halflife)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x181c0929a20>"
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "meanSpread = df1.spread.rolling(window=halflife).mean()\n",
    "stdSpread = df1.spread.rolling(window=halflife).std()\n",
    "    \n",
    "df1['zScore'] = (df1.spread-meanSpread)/stdSpread\n",
    "    \n",
    "df1['zScore'].plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [],
   "source": [
    "entryZscore = 2\n",
    "exitZscore = 0\n",
    " \n",
    "#set up num units long             \n",
    "df1['long entry'] = ((df1.zScore < - entryZscore) & ( df1.zScore.shift(1) > - entryZscore))\n",
    "df1['long exit'] = ((df1.zScore > - exitZscore) & (df1.zScore.shift(1) < - exitZscore)) \n",
    "df1['num units long'] = np.nan \n",
    "df1.loc[df1['long entry'],'num units long'] = 1 \n",
    "df1.loc[df1['long exit'],'num units long'] = 0 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "D:\\Anaconda\\lib\\site-packages\\ipykernel\\__main__.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  if __name__ == '__main__':\n"
     ]
    }
   ],
   "source": [
    "df1['num units long'][0] = 0 \n",
    "df1['num units long'] = df1['num units long'].fillna(method='pad') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "D:\\Anaconda\\lib\\site-packages\\ipykernel\\__main__.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n"
     ]
    }
   ],
   "source": [
    "#set up num units short \n",
    "df1['short entry'] = ((df1.zScore >  entryZscore) & ( df1.zScore.shift(1) < entryZscore))\n",
    "df1['short exit'] = ((df1.zScore < exitZscore) & (df1.zScore.shift(1) > exitZscore))\n",
    "df1.loc[df1['short entry'],'num units short'] = -1\n",
    "df1.loc[df1['short exit'],'num units short'] = 0\n",
    "df1['num units short'][0] = 0\n",
    "df1['num units short'] = df1['num units short'].fillna(method='pad')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1['numUnits'] = df1['num units long'] + df1['num units short']\n",
    "df1['spread pct ch'] = (df1['spread'] - df1['spread'].shift(1)) / ((df1['x'] * abs(df1['hr'])) + df1['y'])\n",
    "df1['port rets'] = df1['spread pct ch'] * df1['numUnits'].shift(1)\n",
    "    \n",
    "df1['cum rets'] = df1['port rets'].cumsum()\n",
    "df1['cum rets'] = df1['cum rets'] + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(df1['cum rets'])\n",
    "plt.xlabel('Time')\n",
    "plt.ylabel('Returns')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CAGR = 1.0%\n",
      "Sharpe Ratio = 0.22\n"
     ]
    }
   ],
   "source": [
    "sharpe = ((df1['port rets'].mean() / df1['port rets'].std()) * sqrt(252))  \n",
    "    \n",
    "start_val = 1\n",
    "end_val = df1['cum rets'].iat[-1]\n",
    "    \n",
    "start_date = df1.iloc[0].name\n",
    "end_date = df1.iloc[-1].name\n",
    "days = (end_date - start_date).days\n",
    "    \n",
    "CAGR = round(((float(end_val) / float(start_val)) ** (252.0/days)) - 1,4)\n",
    "\n",
    "\n",
    "print (\"CAGR = {}%\".format(CAGR*100))\n",
    "print (\"Sharpe Ratio = {}\".format(round(sharpe,2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.863040810000001"
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "-1*(909.03*.020073-21.11)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def backtest(curve, symbolist, zthreshold, period):\n",
    "    x = curve[symbolist[0]][-period:]\n",
    "    y = curve[symbolist[0]][-period:]\n",
    "    \n",
    "    #make sure DataFrames are the same length\n",
    "    min_date = max(df.dropna().index[0] for df in [y, x])\n",
    "    max_date = min(df.dropna().index[-1] for df in [y, x])\n",
    "    y = y[(y.index>= min_date) & (y.index <= max_date)] \n",
    "    x = x[(x.index >= min_date) & (x.index <= max_date)]\n",
    "    \n",
    "    #Show Chart\n",
    "    plt.plot(y, label=symbolist[0])\n",
    "    plt.plot(x, label=symbolist[1])\n",
    "    plt.ylabel('Price')\n",
    "    plt.xlabel('Time')\n",
    "    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n",
    "    plt.show()\n",
    "    #Dotplot + Density Plot\n",
    "    sns.jointplot(y, x,color='b')\n",
    "    plt.show()\n",
    "    \n",
    "    #run Odinary Least Squares regression to find hedge ratio\n",
    "    #and then create spread series\n",
    "    df1 = pd.DataFrame({'y':y,'x':x})\n",
    "    est = sm.OLS(df1.y,df1.x)\n",
    "    est = est.fit()\n",
    "    df1['hr'] = -est.params[0]\n",
    "    df1['spread'] = df1.y + (df1.x * df1.hr)\n",
    "    plt.plot(df1.spread)\n",
    "    plt.show()\n",
    "    \n",
    "    #Augmented Dickey Fullet Test\n",
    "    cadf = ts.adfuller(df1.spread)\n",
    "    print ('Augmented Dickey Fuller test statistic =',cadf[0])\n",
    "    print ('Augmented Dickey Fuller p-value =',cadf[1])\n",
    "    print ('Augmented Dickey Fuller 1%, 5% and 10% test statistics =',cadf[4])\n",
    "    \n",
    "    #Hurst Exponent Test\n",
    "    def hurst(ts):\n",
    "        \"\"\"Returns the Hurst Exponent of the time series vector ts\"\"\"\n",
    "        # Create the range of lag values\n",
    "        lags = range(2, 20)\n",
    "        \n",
    "        # Calculate the array of the variances of the lagged differences\n",
    "        tau = [sqrt(std(subtract(ts[lag:], ts[:-lag]))) for lag in lags]\n",
    "\n",
    "        # Use a linear fit to estimate the Hurst Exponent\n",
    "        poly = polyfit(log(lags), log(tau), 1)\n",
    "\n",
    "        # Return the Hurst exponent from the polyfit output\n",
    "        return poly[0]*2.0\n",
    "    print (\"Hurst Exponent =\",round(hurst(df1.spread),2))\n",
    "    \n",
    "    #Run OLS regression on spread series and lagged version of itself\n",
    "    spread_lag = df1.spread.shift(1)\n",
    "    spread_lag.iloc[0] = spread_lag.iloc[1]\n",
    "    spread_ret = df1.spread - spread_lag\n",
    "    spread_ret.iloc[0] = spread_ret.iloc[1]\n",
    "    spread_lag2 = sm.add_constant(spread_lag)\n",
    "\n",
    "    model = sm.OLS(spread_ret,spread_lag2)\n",
    "    res = model.fit()\n",
    "\n",
    "    halflife = int(round(-np.log(2) / res.params[1],0))\n",
    "\n",
    "    print  ('Halflife = ',halflife)\n",
    "    \n",
    "    #Z-score\n",
    "    meanSpread = df1.spread.rolling(window=halflife).mean()\n",
    "    stdSpread = df1.spread.rolling(window=halflife).std()\n",
    "    df1['zScore'] = (df1.spread-meanSpread)/stdSpread    \n",
    "    df1['zScore'].plot()\n",
    "    \n",
    "    #Set up trigger signals\n",
    "    entryZscore = zthreshold\n",
    "    exitZscore = 0\n",
    " \n",
    "    #set up num units long             \n",
    "    df1['long entry'] = ((df1.zScore < - entryZscore) & ( df1.zScore.shift(1) > - entryZscore))\n",
    "    df1['long exit'] = ((df1.zScore > - exitZscore) & (df1.zScore.shift(1) < - exitZscore)) \n",
    "    df1['num units long'] = np.nan \n",
    "    df1.loc[df1['long entry'],'num units long'] = 1 \n",
    "    df1.loc[df1['long exit'],'num units long'] = 0 \n",
    "    df1['num units long'][0] = 0 \n",
    "    df1['num units long'] = df1['num units long'].fillna(method='pad') \n",
    "    \n",
    "    #set up num units short \n",
    "    df1['short entry'] = ((df1.zScore >  entryZscore) & ( df1.zScore.shift(1) < entryZscore))\n",
    "    df1['short exit'] = ((df1.zScore < exitZscore) & (df1.zScore.shift(1) > exitZscore))\n",
    "    df1.loc[df1['short entry'],'num units short'] = -1\n",
    "    df1.loc[df1['short exit'],'num units short'] = 0\n",
    "    df1['num units short'][0] = 0\n",
    "    df1['num units short'] = df1['num units short'].fillna(method='pad')\n",
    "    \n",
    "    #Cumulative returns\n",
    "    df1['numUnits'] = df1['num units long'] + df1['num units short']\n",
    "    df1['spread pct ch'] = (df1['spread'] - df1['spread'].shift(1)) / ((df1['x'] * abs(df1['hr'])) + df1['y'])\n",
    "    df1['port rets'] = df1['spread pct ch'] * df1['numUnits'].shift(1)\n",
    "    \n",
    "    df1['cum rets'] = df1['port rets'].cumsum()\n",
    "    df1['cum rets'] = df1['cum rets'] + 1\n",
    "    \n",
    "    plt.plot(df1['cum rets'])\n",
    "    plt.xlabel('Time')\n",
    "    plt.ylabel('Returns')\n",
    "    plt.show()\n",
    "    \n",
    "    #Calculate Sharp Ratio and Compounded Annual Returns\n",
    "    sharpe = ((df1['port rets'].mean() / df1['port rets'].std()) * sqrt(252))  \n",
    "    \n",
    "    start_val = 1\n",
    "    end_val = df1['cum rets'].iat[-1]\n",
    "    \n",
    "    start_date = df1.iloc[0].name\n",
    "    end_date = df1.iloc[-1].name\n",
    "    days = (end_date - start_date).days\n",
    "    \n",
    "    CAGR = round(((float(end_val) / float(start_val)) ** (252.0/days)) - 1,4)\n",
    "\n",
    "\n",
    "    print (\"CAGR = {}%\".format(CAGR*100))\n",
    "    print (\"Sharpe Ratio = {}\".format(round(sharpe,2)))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:Anaconda]",
   "language": "python",
   "name": "conda-env-Anaconda-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
